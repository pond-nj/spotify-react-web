{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/SearchBar/SearchBar.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","Track","props","state","addTrack","bind","removeTrack","this","isRemoval","className","onClick","onRemove","track","onAdd","name","artists","albun","renderAction","React","Component","TrackList","RenderTrack","tracks","map","id","SearchResults","searchResults","SearchBar","term","search","handleTermChange","onSearch","e","setState","target","value","placeholder","onChange","type","Playlist","handleNameChange","onNameChange","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","console","log","accessURL","fetch","headers","Authorization","then","response","json","jsonResponse","items","album","uri","savePlaylist","playlistName","tracksURI","userID","method","body","JSON","stringify","playlistID","uris","App","updatePlaylistName","establishToken","find","savedTrack","prevState","concat","filter","currentTrack","trackURIs","onload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ef96733.chunk.js","sourcesContent":["const clientID = 'a8f8fad42f0e45568722c012700162ed';\nconst redirectURL = 'http://pond-nj.surge.sh';\nlet accessToken;\n\nconst Spotify = {\n\n    getAccessToken(){\n        \n\n        if( accessToken ){\n            return accessToken;\n        }else{\n            \n            //check for Token in URL\n            const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n            const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n            if( accessTokenMatch && expiresInMatch ){\n                accessToken = accessTokenMatch[1];\n                const expiresIn = Number(expiresInMatch[1]);\n\n                //clear parameters\n\n                window.setTimeout( () => accessToken = \"\" , expiresIn * 1000 );\n                window.history.pushState('Access Token', null, '/');\n                return accessToken;\n            } else {\n                //accessToken is empty and is not in URL\n                console.log( 'accessToken is empty' );\n                const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n                window.location = accessURL;\n            }\n        }\n    },\n    \n    search( term ){\n        const accessToken = Spotify.getAccessToken();\n        //console.log( `term: ${term}`);\n        return fetch( `https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers:{ Authorization: `Bearer ${accessToken}` }\n        }).then( (response) => {\n            //console.log(response);\n            return response.json();\n        }).then( jsonResponse => {\n            //console.log( jsonResponse );\n            if( !jsonResponse.tracks ){\n                return [{\n                    id:\"none\",\n                    name:\"none\",\n                    artists:\"none\",\n                    albun:\"none\",\n                    uri:\"none\"\n                }];\n            } else {\n                return jsonResponse.tracks.items.map( track => {\n                    return {\n                        id: track.id,\n                        name: track.name,\n                        artists: track.artists[0].name,\n                        albun: track.album.name,\n                        uri: track.uri,\n                    };\n                });\n            }\n\n        });\n\n    },\n\n    savePlaylist( playlistName , tracksURI ){\n        if( !playlistName || !tracksURI ){\n            return;\n        }else {\n            const accessToken = Spotify.getAccessToken();\n            const headers = {\n                Authorization: `Bearer ${accessToken}`\n            };\n            let userID;\n\n            //get userID\n            fetch( 'https://api.spotify.com/v1/me' , {headers: headers}\n            ).then( response => response.json()\n            //create new playlist\n            ).then( jsonResponse => {\n                userID = jsonResponse.id;\n                return fetch( `https://api.spotify.com/v1/users/${userID}/playlists`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ name: playlistName })\n                });\n            }).then( response => {\n                    //console.log( 'response from creating playlist' );\n                    //console.log( 'accessToken:' + accessToken );\n                    //console.log( `status: ${response.status}`);\n                    //console.log(response);\n                    return response.json();\n            //add song to playlist\n            }).then( jsonResponse => {\n                    //console.log( `msg: ${jsonResponse.message}`);\n                    const playlistID = jsonResponse.id;\n                    return fetch( `https://api.spotify.com/v1/playlists/${playlistID}/tracks` , {\n                        headers: headers,\n                        method: 'POST',\n                        body: JSON.stringify( {uris: tracksURI })\n                    });\n            }); //.then( response => { console.log( response )} );\n\n        }\n    }\n}\n\nexport default Spotify;","import React from 'react';\nimport './Track.css';\n\n\nexport default class Track extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            //count:0\n        };\n        this.addTrack=this.addTrack.bind(this);\n        this.removeTrack=this.removeTrack.bind(this);\n    }\n\n\n    renderAction(){\n        if( this.props.isRemoval === true ){\n            return <button className=\"Track-action\" onClick={this.removeTrack}>-</button>\n        }else {\n            //DEBUGGER\n            return <button className=\"Track-action\" onClick={this.addTrack}>{/*this.state.count*/}+</button>\n\n        }\n    }\n\n    removeTrack( ){\n        this.props.onRemove( this.props.track );\n    }\n\n    addTrack( ){\n        this.props.onAdd( this.props.track );\n        //this.setState( prevState => { return { count: prevState.count+1} } );\n    }\n\n    render(){\n        return(\n            <div className=\"Track\">\n                <div className=\"Track-information\">\n                    <h3>{this.props.track.name}</h3>\n                    <p> {this.props.track.artists} | {this.props.track.albun}</p>\n                </div>\n                {this.renderAction()}\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track.js'\n\nexport default class TrackList extends React.Component{\n    constructor(props){\n        super(props);\n        this.RenderTrack = this.RenderTrack.bind(this);\n    }\n\n    RenderTrack(){\n        let tracks = this.props.tracks.map( (track) => <Track\n                                                        track={track}\n                                                        key={track.id}\n                                                        onAdd={this.props.onAdd}\n                                                        isRemoval={this.props.isRemoval}\n                                                        onRemove={this.props.onRemove}/> );\n        return tracks;\n    }\n\n    render(){\n        return(\n            <div className=\"TrackList\">\n                <this.RenderTrack />\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList.js';\n\nexport default class SearchResults extends React.Component{\n    render(){\n        return(\n            <div className=\"SearchResults\">\n                <h2>Results</h2>\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false}/>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './SearchBar.css';\n\nexport default class SearchBar extends React.Component{\n    constructor(props){\n        super(props);\n        this.state={\n            term:\"\"\n        };\n        this.search=this.search.bind(this);\n        this.handleTermChange=this.handleTermChange.bind(this);\n\n    }\n\n    search(){\n        this.props.onSearch( this.state.term );\n    }\n\n    handleTermChange(e){\n        this.setState({\n            term: e.target.value\n        });\n    }\n\n    render(){\n        return(\n            <div className=\"SearchBar\">\n                <input\n                placeholder=\"Enter A Song, Album, or Artist\"\n                onChange={this.handleTermChange}\n                type=\"text\"/>\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\n            </div>\n        );\n\n    }\n}","import './Playlist.css';\nimport React from 'react';\nimport Tracklist from '../TrackList/TrackList.js'\n\nexport default class Playlist extends React.Component{\n    constructor(props){\n        super(props);\n        this.handleNameChange=this.handleNameChange.bind(this);\n    }\n\n    handleNameChange(e){\n        this.props.onNameChange(e.target.value);\n    }\n\n    render(){\n        return(\n            <div className=\"Playlist\">\n                <input\n                defaultValue=\"New Playlist\"\n                onChange={this.handleNameChange}/>\n\n                <Tracklist\n                tracks={this.props.playlistTracks}\n                isRemoval={true}\n                onRemove={this.props.onRemove}/>\n\n                <button\n                className=\"Playlist-save\"\n                onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport './App.css';\nimport SearchResults from '../SearchResults/SearchResults.js';\nimport SearchBar from '../SearchBar/SearchBar.js';\nimport Playlist from '../Playlist/Playlist.js';\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state ={\n      searchResults:[],\n      playlistName:\"New Playlist\",\n      playlistTracks:[],\n    };\n    this.addTrack=this.addTrack.bind(this);\n    this.removeTrack=this.removeTrack.bind(this);\n    this.updatePlaylistName=this.updatePlaylistName.bind(this);\n    this.savePlaylist=this.savePlaylist.bind(this);\n    this.search=this.search.bind(this);\n    this.establishToken=this.establishToken.bind(this);\n  }\n\n  addTrack( track ){\n    if( this.state.playlistTracks.find( savedTrack => { return savedTrack.id === track.id } ) ) {\n      return;\n    } else {\n      this.setState( prevState => {\n        return {playlistTracks: prevState.playlistTracks.concat(track)};\n      });\n\n    }\n  }\n\n  removeTrack( track ){\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter( currentTrack => { return currentTrack.id !== track.id });\n    this.setState({\n      playlistTracks:tracks\n    });\n  }\n\n  updatePlaylistName( name ){\n    this.setState({\n      playlistName: name\n    });\n  }\n\n  savePlaylist(){\n    let trackURIs = this.state.playlistTracks.map( (track) => { return track.uri } );\n    Spotify.savePlaylist( this.state.playlistName ,trackURIs );\n    this.setState({\n      playlistName:\"\",\n      playlistTracks:[]\n    });\n  }\n\n  search( term ){\n    console.log( term );\n    Spotify.search( term ).then( searchResults => {\n      this.setState({ searchResults: searchResults })\n    });\n\n    /*\n    this.setState({\n      SearchResults: Spotify.search( term ) \n    });\n    */\n  }\n\n  establishToken(){\n    window.onload=Spotify.getAccessToken();\n  }\n\n  render(){\n    this.establishToken();\n\n    return (\n      <div>\n\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n          <SearchBar\n          onSearch={this.search}/>\n\n          <div className=\"App-playlist\">\n\n            <SearchResults\n            searchResults={this.state.searchResults}\n            onAdd={this.addTrack}/>\n\n            <Playlist\n            playlistTracks={this.state.playlistTracks} \n            playlistName={this.state.playlistName}\n            onRemove={this.removeTrack}\n            onNameChange={this.updatePlaylistName}\n            onSave={this.savePlaylist}/>\n\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App.js';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}