{"ast":null,"code":"import Playlist from \"../Components/Playlist/Playlist\";\nimport SearchBar from \"../Components/SearchBar/SearchBar\";\nconst clientID = 'a8f8fad42f0e45568722c012700162ed';\nconst redirectURL = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    let accessToken;\n\n    if (accessToken) {\n      return accessToken;\n    } else {\n      //check for Token in URL\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n      if (accessTokenMatch && expiresInMatch) {\n        accessToken = accessTokenMatch[1];\n        const expiresIn = Number(expiresInMatch[1]); //clear parameters\n\n        window.setTimeout(() => {\n          accessToken = \"\";\n        }, expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        return accessToken;\n      } else {\n        //accessToken is empty and is not in URL\n        const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n        window.location = accessURL;\n      }\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      } else {\n        return jsonResponse.tracks.items.map(track => {\n          return {\n            id: track.id,\n            name: track.name,\n            artists: track.artists[0].name,\n            albun: track.album.name,\n            uri: track.uri\n          };\n        });\n      }\n    });\n  },\n\n  savePlaylist(playlistName, tracksURI) {\n    if (!playlistName || !tracksURI) {\n      return;\n    } else {\n      const accessToken = Spotify.getAccessToken();\n      const headers = {\n        Authorization: `Bearer ${accessToken}`\n      };\n      let userID;\n      fetch('https://api.spotify.com/v1/me', {\n        headers: headers\n      }).then(response => response.json()).then(jsonResponse => {\n        userID = jsonResponse.id;\n        fetch(`https://api.spotify.com/v1/users/${userID}/playlists`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            name: playlistName,\n            description: \"react-jammming project\",\n            public: false\n          })\n        }).then(response => response.json()).then(jsonResponse => {\n          const playlistID = jsonResponse.id;\n          return fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {\n            headers: headers,\n            method: 'POST',\n            body: JSON.stringify({\n              uris: tracksURI\n            })\n          });\n        });\n      });\n    }\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/JsProject/jammming/src/util/Spotify.js"],"names":["Playlist","SearchBar","clientID","redirectURL","Spotify","getAccessToken","accessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artists","albun","album","uri","savePlaylist","playlistName","tracksURI","userID","method","body","JSON","stringify","description","public","playlistID","uris"],"mappings":"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","sourcesContent":["import Playlist from \"../Components/Playlist/Playlist\";\nimport SearchBar from \"../Components/SearchBar/SearchBar\";\n\nconst clientID = 'a8f8fad42f0e45568722c012700162ed';\nconst redirectURL = 'http://localhost:3000/';\n\nconst Spotify = {\n\n    getAccessToken(){\n        let accessToken;\n\n        if( accessToken ){\n            return accessToken;\n        }else{\n\n            //check for Token in URL\n            const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n            const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n            if( accessTokenMatch && expiresInMatch ){\n                accessToken = accessTokenMatch[1];\n                const expiresIn = Number(expiresInMatch[1]);\n\n                //clear parameters\n\n                window.setTimeout( () => { accessToken = \"\" }, expiresIn * 1000 );\n                window.history.pushState('Access Token', null, '/');\n                return accessToken;\n            } else {\n                //accessToken is empty and is not in URL\n                const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n                window.location = accessURL;\n            }\n        }\n    },\n    \n    search( term ){\n        const accessToken = Spotify.getAccessToken();\n        return fetch( `https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers:{ Authorization: `Bearer ${accessToken}` }\n        }).then( (response) => {\n            return response.json();\n        }).then( jsonResponse => {\n            if( !jsonResponse.tracks ){\n                return [];\n            } else {\n                return jsonResponse.tracks.items.map( track => {\n                    return {\n                        id: track.id,\n                        name: track.name,\n                        artists: track.artists[0].name,\n                        albun: track.album.name,\n                        uri: track.uri,\n                    };\n                });\n            }\n\n        });\n\n    },\n\n    savePlaylist( playlistName , tracksURI ){\n        if( !playlistName || !tracksURI ){\n            return;\n        }else {\n            const accessToken = Spotify.getAccessToken();\n            const headers = {\n                Authorization: `Bearer ${accessToken}`\n            };\n            let userID;\n\n            fetch( 'https://api.spotify.com/v1/me' , {headers: headers}\n            ).then( response => response.json()\n            ).then( jsonResponse => {\n                userID = jsonResponse.id;\n                fetch( `https://api.spotify.com/v1/users/${userID}/playlists`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ name: playlistName, description: \"react-jammming project\", public: false })\n                }).then( response => response.json()\n                ).then( jsonResponse => {\n                    const playlistID = jsonResponse.id;\n                    return fetch( `https://api.spotify.com/v1/playlists/${playlistID}/tracks` , {\n                        headers: headers,\n                        method: 'POST',\n                        body: JSON.stringify( {uris: tracksURI })\n                    });\n                });\n                \n            }\n            );\n        }\n\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}