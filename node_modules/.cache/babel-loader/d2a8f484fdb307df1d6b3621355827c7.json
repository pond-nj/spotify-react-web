{"ast":null,"code":"const clientID = 'a8f8fad42f0e45568722c012700162ed';\nconst redirectURL = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    let accessToken;\n\n    if (accessToken) {\n      return accessToken;\n    } else {\n      //check for Token in URL\n      const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n      const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n      if (accessTokenMatch && expiresInMatch) {\n        accessToken = accessTokenMatch[1];\n        const expiresIn = Number(expiresInMatch[1]); //clear parameters\n\n        window.setTimeout(() => {\n          accessToken = \"\";\n        }, expiresIn * 1000);\n        window.history.pushState('Access Token', null, '/');\n        return accessToken;\n      } else {\n        //accessToken is empty and is not in URL\n        const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n        window.location = accessURL;\n      }\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    console.log(`term: ${term}`);\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      console.log(response);\n      console.log();\n      return response.json();\n    }).then(jsonResponse => {\n      console.log('2');\n      console.log(jsonResponse);\n\n      if (!jsonResponse.tracks) {\n        console.log('?');\n        return [{\n          id: \"none\",\n          name: \"none\",\n          artists: \"none\",\n          albun: \"none\",\n          uri: \"none\"\n        }];\n      } else {\n        return jsonResponse.tracks.items.map(track => {\n          return {\n            id: track.id,\n            name: track.name,\n            artists: track.artists[0].name,\n            albun: track.album.name,\n            uri: track.uri\n          };\n        });\n      }\n    }).catch(err => {\n      console.log('5555');\n      console.log(err);\n    });\n  },\n\n  savePlaylist(playlistName, tracksURI) {\n    /*\n    if( !playlistName || !tracksURI ){\n        return;\n    }else {\n        const accessToken = Spotify.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessToken}`\n        };\n        let userID;\n         fetch( 'https://api.spotify.com/v1/me' , {headers: headers}\n        ).then( response => response.json()\n        ).then( jsonResponse => {\n            userID = jsonResponse.id;\n            fetch( `https://api.spotify.com/v1/users/${userID}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: playlistName, description: \"react-jammming project\", public: false })\n            }).then( response => response.json()\n            ).then( jsonResponse => {\n                const playlistID = jsonResponse.id;\n                return fetch( `https://api.spotify.com/v1/playlists/${playlistID}/tracks` , {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify( {uris: tracksURI })\n                });\n            });\n         }\n        );\n     }\n    */\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/JsProject/jammming/src/util/Spotify.js"],"names":["clientID","redirectURL","Spotify","getAccessToken","accessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessURL","search","term","console","log","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","id","name","artists","albun","uri","items","map","track","album","catch","err","savePlaylist","playlistName","tracksURI"],"mappings":"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","sourcesContent":["const clientID = 'a8f8fad42f0e45568722c012700162ed';\nconst redirectURL = 'http://localhost:3000/';\n\nconst Spotify = {\n\n    getAccessToken(){\n        let accessToken;\n\n        if( accessToken ){\n            return accessToken;\n        }else{\n\n            //check for Token in URL\n            const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n            const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n            if( accessTokenMatch && expiresInMatch ){\n                accessToken = accessTokenMatch[1];\n                const expiresIn = Number(expiresInMatch[1]);\n\n                //clear parameters\n\n                window.setTimeout( () => { accessToken = \"\" }, expiresIn * 1000 );\n                window.history.pushState('Access Token', null, '/');\n                return accessToken;\n            } else {\n                //accessToken is empty and is not in URL\n                const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n                window.location = accessURL;\n            }\n        }\n    },\n    \n    search( term ){\n        const accessToken = Spotify.getAccessToken();\n        console.log( `term: ${term}`);\n        return fetch( `https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers:{ Authorization: `Bearer ${accessToken}` }\n        }).then( (response) => {\n            console.log(response);\n            console.log()\n            return response.json();\n        }).then( jsonResponse => {\n            console.log('2');\n            console.log( jsonResponse );\n            if( !jsonResponse.tracks ){\n                console.log('?');\n                return [{\n                    id:\"none\",\n                    name:\"none\",\n                    artists:\"none\",\n                    albun:\"none\",\n                    uri:\"none\"\n                }];\n            } else {\n                return jsonResponse.tracks.items.map( track => {\n                    return {\n                        id: track.id,\n                        name: track.name,\n                        artists: track.artists[0].name,\n                        albun: track.album.name,\n                        uri: track.uri,\n                    };\n                });\n            }\n\n        }).catch(err => {\n            console.log( '5555');\n            console.log( err );\n        });\n\n    },\n\n    savePlaylist( playlistName , tracksURI ){\n        /*\n        if( !playlistName || !tracksURI ){\n            return;\n        }else {\n            const accessToken = Spotify.getAccessToken();\n            const headers = {\n                Authorization: `Bearer ${accessToken}`\n            };\n            let userID;\n\n            fetch( 'https://api.spotify.com/v1/me' , {headers: headers}\n            ).then( response => response.json()\n            ).then( jsonResponse => {\n                userID = jsonResponse.id;\n                fetch( `https://api.spotify.com/v1/users/${userID}/playlists`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ name: playlistName, description: \"react-jammming project\", public: false })\n                }).then( response => response.json()\n                ).then( jsonResponse => {\n                    const playlistID = jsonResponse.id;\n                    return fetch( `https://api.spotify.com/v1/playlists/${playlistID}/tracks` , {\n                        headers: headers,\n                        method: 'POST',\n                        body: JSON.stringify( {uris: tracksURI })\n                    });\n                });\n\n            }\n            );\n\n        }\n    */\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}