{"ast":null,"code":"var clientID='a8f8fad42f0e45568722c012700162ed';var redirectURL='http://icky-babies.surge.sh';var accessToken;var Spotify={getAccessToken:function getAccessToken(){if(accessToken){return accessToken;}else{//check for Token in URL\nvar accessTokenMatch=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessTokenMatch&&expiresInMatch){accessToken=accessTokenMatch[1];var expiresIn=Number(expiresInMatch[1]);//clear parameters\nwindow.setTimeout(function(){return accessToken=\"\";},expiresIn*1000);window.history.pushState('Access Token',null,'/');return accessToken;}else{//accessToken is empty and is not in URL\nconsole.log('accessToken is empty');var accessURL=\"https://accounts.spotify.com/authorize?client_id=\".concat(clientID,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirectURL);window.location=accessURL;}}},search:function search(term){var accessToken=Spotify.getAccessToken();//console.log( `term: ${term}`);\nreturn fetch(\"https://api.spotify.com/v1/search?type=track&q=\".concat(term),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){//console.log(response);\nreturn response.json();}).then(function(jsonResponse){//console.log( jsonResponse );\nif(!jsonResponse.tracks){return[{id:\"none\",name:\"none\",artists:\"none\",albun:\"none\",uri:\"none\"}];}else{return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artists:track.artists[0].name,albun:track.album.name,uri:track.uri};});}});},savePlaylist:function savePlaylist(playlistName,tracksURI){if(!playlistName||!tracksURI){return;}else{var _accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(_accessToken)};var userID;//get userID\nfetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}//create new playlist\n).then(function(jsonResponse){userID=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userID,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:playlistName})});}).then(function(response){//console.log( 'response from creating playlist' );\n//console.log( 'accessToken:' + accessToken );\n//console.log( `status: ${response.status}`);\n//console.log(response);\nreturn response.json();//add song to playlist\n}).then(function(jsonResponse){//console.log( `msg: ${jsonResponse.message}`);\nvar playlistID=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/playlists/\".concat(playlistID,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:tracksURI})});});//.then( response => { console.log( response )} );\n}}};export default Spotify;","map":{"version":3,"sources":["/Users/nutdranai.jaruthikorn/Desktop/JsProject/jammming/src/util/Spotify.js"],"names":["clientID","redirectURL","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","console","log","accessURL","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","id","name","artists","albun","uri","items","map","track","album","savePlaylist","playlistName","tracksURI","userID","method","body","JSON","stringify","playlistID","uris"],"mappings":"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","sourcesContent":["const clientID = 'a8f8fad42f0e45568722c012700162ed';\nconst redirectURL = 'http://icky-babies.surge.sh';\nlet accessToken;\n\nconst Spotify = {\n\n    getAccessToken(){\n        \n\n        if( accessToken ){\n            return accessToken;\n        }else{\n            \n            //check for Token in URL\n            const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n            const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n            if( accessTokenMatch && expiresInMatch ){\n                accessToken = accessTokenMatch[1];\n                const expiresIn = Number(expiresInMatch[1]);\n\n                //clear parameters\n\n                window.setTimeout( () => accessToken = \"\" , expiresIn * 1000 );\n                window.history.pushState('Access Token', null, '/');\n                return accessToken;\n            } else {\n                //accessToken is empty and is not in URL\n                console.log( 'accessToken is empty' );\n                const accessURL = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURL}`;\n                window.location = accessURL;\n            }\n        }\n    },\n    \n    search( term ){\n        const accessToken = Spotify.getAccessToken();\n        //console.log( `term: ${term}`);\n        return fetch( `https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers:{ Authorization: `Bearer ${accessToken}` }\n        }).then( (response) => {\n            //console.log(response);\n            return response.json();\n        }).then( jsonResponse => {\n            //console.log( jsonResponse );\n            if( !jsonResponse.tracks ){\n                return [{\n                    id:\"none\",\n                    name:\"none\",\n                    artists:\"none\",\n                    albun:\"none\",\n                    uri:\"none\"\n                }];\n            } else {\n                return jsonResponse.tracks.items.map( track => {\n                    return {\n                        id: track.id,\n                        name: track.name,\n                        artists: track.artists[0].name,\n                        albun: track.album.name,\n                        uri: track.uri,\n                    };\n                });\n            }\n\n        });\n\n    },\n\n    savePlaylist( playlistName , tracksURI ){\n        if( !playlistName || !tracksURI ){\n            return;\n        }else {\n            const accessToken = Spotify.getAccessToken();\n            const headers = {\n                Authorization: `Bearer ${accessToken}`\n            };\n            let userID;\n\n            //get userID\n            fetch( 'https://api.spotify.com/v1/me' , {headers: headers}\n            ).then( response => response.json()\n            //create new playlist\n            ).then( jsonResponse => {\n                userID = jsonResponse.id;\n                return fetch( `https://api.spotify.com/v1/users/${userID}/playlists`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ name: playlistName })\n                });\n            }).then( response => {\n                    //console.log( 'response from creating playlist' );\n                    //console.log( 'accessToken:' + accessToken );\n                    //console.log( `status: ${response.status}`);\n                    //console.log(response);\n                    return response.json();\n            //add song to playlist\n            }).then( jsonResponse => {\n                    //console.log( `msg: ${jsonResponse.message}`);\n                    const playlistID = jsonResponse.id;\n                    return fetch( `https://api.spotify.com/v1/playlists/${playlistID}/tracks` , {\n                        headers: headers,\n                        method: 'POST',\n                        body: JSON.stringify( {uris: tracksURI })\n                    });\n            }); //.then( response => { console.log( response )} );\n\n        }\n    }\n}\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}